<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ensys.qray.web.api.apiMapper">

    <select id="partnerDetail" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.partnerDetail*/
        SELECT A.PARTNER_NM AS "PARTNER_NM"
             , FORMAT('%s-%s-%s', SUBSTRING(A.COMPANY_NO FROM 1 FOR 3), SUBSTRING(A.COMPANY_NO FROM 4 FOR 2), SUBSTRING(A.COMPANY_NO FROM 6)) AS "COMPANY_NO"
             , B.E_MAIL AS "E_MAIL"
             , B.TEL_NO AS "TEL_NO"
             , A.YOUTUBE_LINK AS "YOUTUBE_LINK"
             , A.TELEGRAM AS "TELEGRAM"
             , A.KAKAOTALK AS "KAKAOTALK"
             , A.PARTNER_TP AS "PARTNER_TP"
             , A.HOME_PAGE AS "HOME_PAGE"
             , A.COMPANY_INTRO AS "COMPANY_INTRO"
             , A.COMPANY_INTRO_HTML AS "COMPANY_INTRO_HTML"
             , F_ES_CATEGORY_NM(A.COMPANY_CD, A.JOB_FIELD) AS "JOB_FIELD"
             , F_ES_CATEGORY_ICON(A.COMPANY_CD, A.JOB_FIELD) AS "JOB_FIELD_ICON"
             , F_ES_CATEGORY_NM(A.COMPANY_CD, A.JOB_EP) AS "JOB_EP"
             , F_ES_CATEGORY_ICON(A.COMPANY_CD, A.JOB_EP) AS "JOB_EP_ICON"
             , F_ES_CATEGORY_NM(A.COMPANY_CD, A.JOB_ZONE) AS "JOB_ZONE"
             , A.ITEM_INTRO AS "ITEM_INTRO"
             , C.STAR_SCORE_TOT AS "STAR_SCORE_TOT"
             , C.COUNT AS "COUNT"
        FROM ES_PARTNER A
        LEFT JOIN ES_PARTNER_PTR B
        ON A.COMPANY_CD = B.COMPANY_CD
        AND A.PARTNER_CD = B.PARTNER_CD
        AND B.MAIN_YN = 'Y'
        LEFT JOIN (
                   SELECT         COMPANY_CD AS COMPANY_CD
                               ,  PARTNER_CD AS PARTNER_CD
                               ,  COUNT(SEQ) AS COUNT
                               ,  ROUND(SUM(STAR_SCORE) / COUNT(SEQ)) AS STAR_SCORE_TOT
                          FROM ES_REVIEW_WRITE
                          GROUP BY COMPANY_CD, PARTNER_CD
                ) C
        ON A.COMPANY_CD = C.COMPANY_CD
        AND A.PARTNER_CD = C.PARTNER_CD
        WHERE A.COMPANY_CD = #{COMPANY_CD}
          AND A.PARTNER_CD = #{PARTNER_CD}
    </select>

    <select id="blurbMasterSelect" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.blurbMasterSelect*/
        SELECT    adv_cd
                , adv_nm
                , am
                , adv_month
                , box_yn
                , box_num
        FROM ES_BLURB_MASTER
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND ADV_CD = #{ADV_CD}
    </select>

    <select id="partnerImg" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.partnerImg*/
        SELECT  CONCAT(#{IMG_URL}, FILE_NAME, '.', FILE_EXT) AS img_url
              , MAIN_YN AS main_yn
        FROM ES_FILE
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND TABLE_ID = 'partner'
          AND TABLE_KEY = #{PARTNER_CD}
    </select>

    <select id="partnerBlurbList" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.partnerBlurbList*/
        SELECT    c.partner_cd
                , c.partner_nm
                , c.company_intro
                , c.youtube_link
                , d.tel_no
                , concat(#{IMG_URL},e.file_name,'.',e.file_ext) as img_url
        FROM ES_CONTRACT_PACKAGE A
        LEFT JOIN ES_CONTRACT B
        ON A.COMPANY_CD = B.COMPANY_CD
        AND A.CONTRACT_CD = B.CONTRACT_CD
        LEFT JOIN ES_PARTNER C
        ON B.COMPANY_CD = B.COMPANY_CD
        AND B.PARTNER_CD = C.PARTNER_CD
        LEFT JOIN ES_PARTNER_PTR D
        ON C.COMPANY_CD = D.COMPANY_CD
        AND C.PARTNER_CD = D.PARTNER_CD
        AND D.MAIN_YN = 'Y'
        LEFT JOIN ES_FILE E
        ON C.COMPANY_CD = E.COMPANY_CD
        AND C.PARTNER_CD = E.TABLE_KEY
        AND E.TABLE_ID = 'partner'
        AND E.MAIN_YN = 'Y'
        WHERE B.COMPANY_CD = #{COMPANY_CD}
        AND B.CONTRACT_ST = '02'
        AND TO_DATE(TO_CHAR(CURRENT_DATE, 'YYYYMMDD'), 'YYYYMMDD') BETWEEN TO_DATE(B.CONTRACT_START_DT, 'YYYYMMDD') AND TO_DATE(B.CONTRACT_END_DT, 'YYYYMMDD')
        <if test='ADV_CD != null and ADV_CD != ""'>
            AND A.PKG_CD IN (
            SELECT PKG_CD FROM ES_BLURB_PKG_D WHERE COMPANY_CD =  #{COMPANY_CD} AND ADV_CD = #{ADV_CD} /*광고코드파라미터*/
            )
        </if>
        <if test = "L_ADV_CD != null and L_ADV_CD.size() > 0 and !L_ADV_CD.get(0).equals('')">
            AND A.PKG_CD IN (
            SELECT PKG_CD FROM ES_BLURB_PKG_D WHERE COMPANY_CD =  #{COMPANY_CD} AND ADV_CD IN
            <foreach collection="L_ADV_CD" item="item"  open="(" close=")" separator=",">
                #{item}
            </foreach>
            )
        </if>
        ORDER BY RANDOM();
    </select>

    <select id="centerBannerImg" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.centerBannerImg*/
        SELECT CONCAT(#{IMG_URL}, FILE_NAME,'.', FILE_EXT) AS IMG_URL, TABLE_ID AS TABLE_ID
        FROM ES_FILE
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND TABLE_ID LIKE '%CENTER_BANNER%'
          AND TABLE_KEY LIKE '%CENTER_BANNER%'
    </select>

    <select id="getPartnerSearch" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPartnerSearch*/
        SELECT    B.PARTNER_CD AS "PARTNER_CD"
                , B.PARTNER_NM AS "PARTNER_NM"
                , F_ES_CODE_DETAIL(B.COMPANY_CD, 'ES_Q0033', B.PARTNER_TP) AS "PARTNER_TP"
                , CONCAT('의뢰지역 : ' , REPLACE(F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_ZONE), '|', ', ')) AS "JOB_ZONE"
                , B.COMPANY_INTRO AS "COMPANY_INTRO"
                , CONCAT(#{IMG_URL}, C.FILE_NAME,'.', C.FILE_EXT) AS "IMG_URL"
        FROM ES_CONTRACT A
        JOIN ES_PARTNER B
        ON A.COMPANY_CD = B.COMPANY_CD
        AND A.PARTNER_CD = B.PARTNER_CD
        LEFT JOIN ES_FILE C
        ON B.COMPANY_CD = C.COMPANY_CD
        AND B.PARTNER_CD = C.TABLE_KEY
        AND C.TABLE_ID = 'partner'
        AND C.MAIN_YN = 'Y'
        WHERE A.COMPANY_CD = #{COMPANY_CD}
        AND A.CONTRACT_ST = '02'
        <if test='KEYWORD != null and KEYWORD != ""'>
            AND B.PARTNER_NM LIKE  '%' || #{KEYWORD} || '%'
        </if>
        <if test='PARTNER_TP != null and PARTNER_TP != ""'>
            AND B.PARTNER_TP = #{PARTNER_TP}
        </if>
        <if test = "L_JOB_ZONE != null and L_JOB_ZONE.size() > 0 and !L_JOB_ZONE.get(0).equals('')">
            AND ( F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_ZONE) LIKE
            <foreach collection="L_JOB_ZONE" item="item" separator="OR F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_ZONE) LIKE ">
                <![CDATA[ CONCAT('%', #{item}, '%')  ]]>
            </foreach>
            )
        </if>
        <if test = "L_CATEGORY != null and L_CATEGORY.size() > 0 and !L_CATEGORY.get(0).equals('')">
            AND (
            ( F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_FIELD) LIKE
            <foreach collection="L_CATEGORY" item="item"
                     separator="OR F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_FIELD) LIKE ">
                <![CDATA[ CONCAT('%', #{item}, '%')  ]]>
            </foreach>
            )
            OR
            ( F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_EP) LIKE
            <foreach collection="L_CATEGORY" item="item" separator="OR F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_EP) LIKE ">
                <![CDATA[ CONCAT('%', #{item}, '%')  ]]>
            </foreach>
            )
            )
        </if>
        ORDER BY RANDOM();
    </select>

    <update id="callClick" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.callClick*/
        UPDATE ES_PARTNER
        SET   CALL_CLICK = (SELECT COALESCE(CALL_CLICK, 0) + 1 FROM ES_PARTNER WHERE COMPANY_CD = #{COMPANY_CD} AND PARTNER_CD = #{PARTNER_CD})
        WHERE  COMPANY_CD    = #{COMPANY_CD}
          AND    PARTNER_CD = #{PARTNER_CD}
    </update>

    <select id="getCategory" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getCategory*/
        SELECT CATEGORY_NM AS "CATEGORY_NM"
        FROM ES_CATEGORY
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND PARENT_CD NOT IN ('MASTER', '01', '02', '03', '07', '08', '09')
        GROUP BY CATEGORY_NM
    </select>


    <select id="getNoticeAsking" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getNoticeAsking*/
        SELECT        COMPANY_CD AS "COMPANY_CD"
                    , BOARD_TYPE AS "BOARD_TYPE"
                    , SEQ AS "SEQ"
                    , TITLE AS "TITLE"
                    , CONTENTS AS "CONTENTS"
                    , MAIN_YN AS "MAIN_YN"
                    , INSERT_ID AS "INSERT_ID"
                    , INSERT_DTS AS "INSERT_DTS"
                    , UPDATE_ID AS "UPDATE_ID"
                    , UPDATE_DTS AS "UPDATE_DTS"
                    , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::date, 'YYYY-MM-DD') AS "DTS"
        FROM ES_BOARD
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND BOARD_TYPE NOT IN ('01')
        ORDER BY UPDATE_DTS, SEQ DESC
    </select>

    <select id="getNoticePaging" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getNoticePaging*/
        SELECT        COMPANY_CD AS "COMPANY_CD"
                    , BOARD_TYPE AS "BOARD_TYPE"
                    , SEQ AS "SEQ"
                    , TITLE AS "TITLE"
                    , CONTENTS AS "CONTENTS"
                    , MAIN_YN AS "MAIN_YN"
                    , INSERT_ID AS "INSERT_ID"
                    , INSERT_DTS AS "INSERT_DTS"
                    , UPDATE_ID AS "UPDATE_ID"
                    , UPDATE_DTS AS "UPDATE_DTS"
                    , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::date, 'YYYY-MM-DD') AS "DTS"
        FROM ES_BOARD
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND BOARD_TYPE = '01'
          AND COALESCE(MAIN_YN, '') != 'N'
        ORDER BY UPDATE_DTS, SEQ DESC
        LIMIT #{LIMIT} OFFSET (#{OFFSET} * #{LIMIT})
    </select>

    <select id="getPaging" resultType="int" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPaging*/
        SELECT COUNT(*) AS "PAGING"
        FROM ES_BOARD
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND BOARD_TYPE = '01'
          AND COALESCE(MAIN_YN, '') != 'N'
    </select>

    <select id="getMainNotice" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getMainNotice*/
        SELECT     COMPANY_CD AS "COMPANY_CD"
                 , BOARD_TYPE AS "BOARD_TYPE"
                 , SEQ AS "SEQ"
                 , TITLE AS "TITLE"
                 , CONTENTS AS "CONTENTS"
                 , MAIN_YN AS "MAIN_YN"
                 , INSERT_ID AS "INSERT_ID"
                 , INSERT_DTS AS "INSERT_DTS"
                 , UPDATE_ID AS "UPDATE_ID"
                 , UPDATE_DTS AS "UPDATE_DTS"
                 , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::date, 'YYYY-MM-DD') AS "DTS"
        FROM ES_BOARD
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND BOARD_TYPE = '01'
          AND COALESCE(MAIN_YN, '') = 'Y'
        ORDER BY UPDATE_DTS, SEQ DESC
        <if test='LIMIT != null and LIMIT != ""'>
        LIMIT #{LIMIT}
        </if>
    </select>

    <select id="getCommunityMainPage" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getCommunityMainPage*/
        SELECT     COMPANY_CD AS "COMPANY_CD"
                 , SEQ AS "SEQ"
                 , COMMUNITY_TP AS "COMMUNITY_TP"
                 , COMMUNITY_ST AS "COMMUNITY_ST"
                 , TITLE AS "TITLE"
                 , CONTENTS AS "CONTENTS"
                 , HIT AS "HIT"
                 , INSERT_ID AS "INSERT_ID"
                 , INSERT_DTS AS "INSERT_DTS"
                 , UPDATE_ID AS "UPDATE_ID"
                 , UPDATE_DTS AS "UPDATE_DTS"
                 , LIKE_NUM AS "LIKE_NUM"
                 , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::DATE, 'YYYY-MM-DD') AS "DTS"
        FROM ES_COMMUNITY
        WHERE COMPANY_CD = #{COMPANY_CD}
        AND COMMUNITY_TP = #{COMMUNITY_TP}
        ORDER BY UPDATE_DTS, SEQ DESC
        <if test='LIMIT != null and LIMIT != ""'>
            LIMIT #{LIMIT}
        </if>
    </select>

    <insert id="setWrite" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.setWrite*/
        INSERT INTO ES_COMMUNITY
        (
              COMPANY_CD
            , SEQ
            , NAME
            , COMMUNITY_TP
            , COMMUNITY_ST
            , TITLE
            , CONTENTS
            , HIT
            , INSERT_ID
            , INSERT_DTS
            , UPDATE_ID
            , UPDATE_DTS
        )
        VALUES
        (
              #{COMPANY_CD}
            , (SELECT COALESCE(MAX(SEQ), 0) + 1
               FROM ES_COMMUNITY
               WHERE COMPANY_CD = #{COMPANY_CD}
              )
            , #{NAME}
            , #{COMMUNITY_TP}
            , #{COMMUNITY_ST}
            , #{TITLE}
            , #{CONTENTS}
            , 0
            , #{INSERT_ID}
            , #{INSERT_DTS}
            , #{UPDATE_ID}
            , #{UPDATE_DTS}
       )
    </insert>

    <update id="hitPlus" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.hitPlus*/
        UPDATE ES_COMMUNITY
        SET   HIT = (SELECT COALESCE(HIT, 0) + 1 FROM ES_COMMUNITY WHERE COMPANY_CD = #{COMPANY_CD} AND SEQ = #{SEQ})
        WHERE  COMPANY_CD    = #{COMPANY_CD}
          AND    SEQ = #{SEQ}
    </update>

    <update id="likePlus" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.likePlus*/
        UPDATE ES_COMMUNITY
        SET   LIKE_NUM = (SELECT COALESCE(LIKE_NUM, 0) + 1 FROM ES_COMMUNITY WHERE COMPANY_CD = #{COMPANY_CD} AND SEQ = #{SEQ})
        WHERE  COMPANY_CD    = #{COMPANY_CD}
          AND    SEQ = #{SEQ}
    </update>

    <update id="noPlus" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.noPlus*/
        UPDATE ES_COMMUNITY A
        SET   NO_NUM = (SELECT COALESCE(A.NO_NUM, 0) + 1 FROM ES_COMMUNITY WHERE COMPANY_CD = #{COMPANY_CD} AND SEQ = #{SEQ})
        WHERE  COMPANY_CD    = #{COMPANY_CD}
          AND    SEQ = #{SEQ}
    </update>

    <select id="getCommonCode" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getCommonCode*/
        SELECT   SYSDEF_CD AS "CODE"
               , SYSDEF_NM AS "NAME"
        FROM ES_CODEDTL
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND FIELD_CD = #{FIELD_CD}
          AND COALESCE(USE_YN, '') = 'Y'
    </select>

    <select id="getConsultingPaging" resultType="int" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getConsultingPaging*/
        SELECT COUNT(*) AS "PAGING"
        FROM ES_COMMUNITY
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND COMMUNITY_TP = #{COMMUNITY_TP}
        <if test = "!L_COMMUNITY_ST.get(0).equals('') and L_COMMUNITY_ST.size() > 0">
            AND COMMUNITY_ST IN (
            <foreach collection="L_COMMUNITY_ST" item="item" separator=",">
                #{item}
            </foreach>
            )
        </if>
    </select>

    <select id="getConsultingList" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getConsultingList*/
        SELECT
               COMPANY_CD AS "COMPANY_CD"
             , SEQ AS "SEQ"
             , NAME AS "NAME"
             , COMMUNITY_TP AS "COMMUNITY_TP"
             , COMMUNITY_ST AS "COMMUNITY_ST"
             , TITLE AS "TITLE"
             , CONTENTS AS "CONTENTS"
             , HIT AS "HIT"
             , INSERT_ID AS "INSERT_ID"
             , UPDATE_ID AS "UPDATE_ID"
             , UPDATE_DTS AS "UPDATE_DTS"
             , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::date, 'YYYY-MM-DD') AS "DTS"
        FROM ES_COMMUNITY
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND COMMUNITY_TP = #{COMMUNITY_TP}
        <if test = " S_COMMUNITY_ST != null and !S_COMMUNITY_ST.get(0).equals('') and S_COMMUNITY_ST.size() > 0 ">
            AND COMMUNITY_ST IN
            <foreach collection="S_COMMUNITY_ST" item="item"  open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        ORDER BY SEQ DESC
            LIMIT #{LIMIT} OFFSET (#{OFFSET} * #{LIMIT})
    </select>

    <insert id="reviewWrite" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.reviewWrite*/
        INSERT INTO ES_REVIEW_WRITE
        (
            COMPANY_CD
        , SEQ
        , NAME
        , IP
        , PARTNER_CD
        , RMK_DC
        , STAR_SCORE
        , INSERT_ID
        , INSERT_DTS
        , UPDATE_ID
        , UPDATE_DTS
        )
        VALUES
            (
                #{COMPANY_CD}
            , (SELECT COALESCE(MAX(SEQ), 0) + 1
               FROM ES_REVIEW_WRITE
               WHERE COMPANY_CD = #{COMPANY_CD}
                AND PARTNER_CD = #{PARTNER_CD}
                )
            , #{NAME}
            , #{IP}
            , #{PARTNER_CD}
            , #{RMK_DC}
            , #{STAR_SCORE}
            , #{INSERT_ID}
            , #{INSERT_DTS}
            , #{UPDATE_ID}
            , #{UPDATE_DTS}
            )
    </insert>

    <select id="getReviewList" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getReviewList*/
        SELECT     COMPANY_CD AS "COMPANY_CD"
                 , SEQ AS "SEQ"
                 , CASE WHEN LENGTH(NAME) > 0 THEN SUBSTRING(NAME FROM 1 FOR 1) || REPEAT('*', LENGTH(NAME) - 1) ELSE NAME END AS "NAME"
                 , IP AS "IP"
                 , RMK_DC AS "RMK_DC"
                 , STAR_SCORE AS "STAR_SCORE"
                 , INSERT_DTS AS "INSERT_DTS"
                 , REGEXP_REPLACE(INSERT_DTS, '(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})', '\1.\2.\3 \4:\5') AS "DTS"
        FROM ES_REVIEW_WRITE
        WHERE COMPANY_CD = #{COMPANY_CD}
        AND PARTNER_CD = #{PARTNER_CD}
        ORDER BY SEQ DESC
        LIMIT #{LIMIT} OFFSET (#{OFFSET} * #{LIMIT})
    </select>


</mapper>