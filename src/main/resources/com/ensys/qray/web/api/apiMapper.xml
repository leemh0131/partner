<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ensys.qray.web.api.apiMapper">

    <select id="partnerDetail" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.partnerDetail*/
        SELECT A.PARTNER_NM AS "PARTNER_NM"
             , FORMAT('%s-%s-%s', SUBSTRING(A.COMPANY_NO FROM 1 FOR 3), SUBSTRING(A.COMPANY_NO FROM 4 FOR 2), SUBSTRING(A.COMPANY_NO FROM 6)) AS "COMPANY_NO"
             , B.E_MAIL AS "E_MAIL"
             , B.TEL_NO AS "TEL_NO"
             , A.YOUTUBE_LINK AS "YOUTUBE_LINK"
             , A.TELEGRAM AS "TELEGRAM"
             , A.KAKAOTALK AS "KAKAOTALK"
             , A.PARTNER_TP AS "PARTNER_TP"
             , A.HOME_PAGE AS "HOME_PAGE"
             , A.COMPANY_INTRO AS "COMPANY_INTRO"
             , A.COMPANY_INTRO_HTML AS "COMPANY_INTRO_HTML"
             , F_ES_CATEGORY_NM(A.COMPANY_CD, A.JOB_FIELD) AS "JOB_FIELD"
             , F_ES_CATEGORY_ICON(A.COMPANY_CD, A.JOB_FIELD) AS "JOB_FIELD_ICON"
             , F_ES_CATEGORY_NM(A.COMPANY_CD, A.JOB_EP) AS "JOB_EP"
             , F_ES_CATEGORY_ICON(A.COMPANY_CD, A.JOB_EP) AS "JOB_EP_ICON"
             , F_ES_CATEGORY_NM(A.COMPANY_CD, A.JOB_ZONE) AS "JOB_ZONE"
             , A.ITEM_INTRO AS "ITEM_INTRO"
             , C.STAR_SCORE_TOT AS "STAR_SCORE_TOT"
             , C.COUNT AS "COUNT"
        FROM ES_PARTNER A
        LEFT JOIN ES_PARTNER_PTR B
        ON A.COMPANY_CD = B.COMPANY_CD
        AND A.PARTNER_CD = B.PARTNER_CD
        AND B.MAIN_YN = 'Y'
        LEFT JOIN (
                   SELECT         COMPANY_CD AS COMPANY_CD
                               ,  PARTNER_CD AS PARTNER_CD
                               ,  COUNT(SEQ) AS COUNT
                               ,  ROUND(SUM(STAR_SCORE) / COUNT(SEQ)) AS STAR_SCORE_TOT
                          FROM ES_REVIEW_WRITE
                          GROUP BY COMPANY_CD, PARTNER_CD
                ) C
        ON A.COMPANY_CD = C.COMPANY_CD
        AND A.PARTNER_CD = C.PARTNER_CD
        WHERE A.COMPANY_CD = #{COMPANY_CD}
          AND A.PARTNER_CD = #{PARTNER_CD}
    </select>

    <select id="blurbMasterSelect" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.blurbMasterSelect*/
        SELECT    adv_cd
                , adv_nm
                , am
                , adv_month
                , box_yn
                , box_num
        FROM ES_BLURB_MASTER
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND ADV_CD = #{ADV_CD}
    </select>

    <select id="partnerImg" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.partnerImg*/
        SELECT  CONCAT(#{IMG_URL}, FILE_NAME, '.', FILE_EXT) AS img_url
              , MAIN_YN AS main_yn
        FROM ES_FILE
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND TABLE_ID = 'partner'
          AND TABLE_KEY = #{PARTNER_CD}
    </select>

    <select id="partnerBlurbList" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.partnerBlurbList*/
        SELECT    c.partner_cd
                , c.partner_nm
                , c.company_intro
                , c.youtube_link
                , d.tel_no
                , concat(#{IMG_URL},e.file_name,'.',e.file_ext) as img_url
        FROM ES_CONTRACT_PACKAGE A
        LEFT JOIN ES_CONTRACT B
        ON A.COMPANY_CD = B.COMPANY_CD
        AND A.CONTRACT_CD = B.CONTRACT_CD
        LEFT JOIN ES_PARTNER C
        ON B.COMPANY_CD = B.COMPANY_CD
        AND B.PARTNER_CD = C.PARTNER_CD
        LEFT JOIN ES_PARTNER_PTR D
        ON C.COMPANY_CD = D.COMPANY_CD
        AND C.PARTNER_CD = D.PARTNER_CD
        AND D.MAIN_YN = 'Y'
        LEFT JOIN ES_FILE E
        ON C.COMPANY_CD = E.COMPANY_CD
        AND C.PARTNER_CD = E.TABLE_KEY
        AND E.TABLE_ID = 'partner'
        AND E.MAIN_YN = 'Y'
        WHERE B.COMPANY_CD = #{COMPANY_CD}
        AND B.CONTRACT_ST = '02'
        AND TO_DATE(TO_CHAR(CURRENT_DATE, 'YYYYMMDD'), 'YYYYMMDD') BETWEEN TO_DATE(B.CONTRACT_START_DT, 'YYYYMMDD') AND TO_DATE(B.CONTRACT_END_DT, 'YYYYMMDD')
        <if test='ADV_CD != null and ADV_CD != ""'>
            AND A.PKG_CD IN (
            SELECT PKG_CD FROM ES_BLURB_PKG_D WHERE COMPANY_CD =  #{COMPANY_CD} AND ADV_CD = #{ADV_CD} /*광고코드파라미터*/
            )
        </if>
        <if test = "L_ADV_CD != null and L_ADV_CD.size() > 0 and !L_ADV_CD.get(0).equals('')">
            AND A.PKG_CD IN (
            SELECT PKG_CD FROM ES_BLURB_PKG_D WHERE COMPANY_CD =  #{COMPANY_CD} AND ADV_CD IN
            <foreach collection="L_ADV_CD" item="item"  open="(" close=")" separator=",">
                #{item}
            </foreach>
            )
        </if>
        ORDER BY RANDOM();
    </select>

    <select id="centerBannerImg" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.centerBannerImg*/
        SELECT CONCAT(#{IMG_URL}, FILE_NAME,'.', FILE_EXT) AS IMG_URL, TABLE_ID AS TABLE_ID
        FROM ES_FILE
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND TABLE_ID LIKE '%CENTER_BANNER%'
          AND TABLE_KEY LIKE '%CENTER_BANNER%'
    </select>

    <select id="getPartnerSearch" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPartnerSearch*/
        SELECT    B.PARTNER_CD AS "PARTNER_CD"
                , B.PARTNER_NM AS "PARTNER_NM"
                , F_ES_CODE_DETAIL(B.COMPANY_CD, 'ES_Q0033', B.PARTNER_TP) AS "PARTNER_TP"
                , CONCAT('의뢰지역 : ' , REPLACE(F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_ZONE), '|', ', ')) AS "JOB_ZONE"
                , B.COMPANY_INTRO AS "COMPANY_INTRO"
                , CONCAT(#{IMG_URL}, C.FILE_NAME,'.', C.FILE_EXT) AS "IMG_URL"
        FROM ES_CONTRACT A
        JOIN ES_PARTNER B
        ON A.COMPANY_CD = B.COMPANY_CD
        AND A.PARTNER_CD = B.PARTNER_CD
        LEFT JOIN ES_FILE C
        ON B.COMPANY_CD = C.COMPANY_CD
        AND B.PARTNER_CD = C.TABLE_KEY
        AND C.TABLE_ID = 'partner'
        AND C.MAIN_YN = 'Y'
        WHERE A.COMPANY_CD = #{COMPANY_CD}
        AND A.CONTRACT_ST = '02'
        <if test='KEYWORD != null and KEYWORD != ""'>
            AND B.PARTNER_NM LIKE  '%' || #{KEYWORD} || '%'
        </if>
        <if test='PARTNER_TP != null and PARTNER_TP != ""'>
            AND B.PARTNER_TP = #{PARTNER_TP}
        </if>
        <if test = "L_JOB_ZONE != null and L_JOB_ZONE.size() > 0 and !L_JOB_ZONE.get(0).equals('')">
            AND ( F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_ZONE) LIKE
            <foreach collection="L_JOB_ZONE" item="item" separator="OR F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_ZONE) LIKE ">
                <![CDATA[ CONCAT('%', #{item}, '%')  ]]>
            </foreach>
            )
        </if>
        <if test = "L_CATEGORY != null and L_CATEGORY.size() > 0 and !L_CATEGORY.get(0).equals('')">
            AND (
            ( F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_FIELD) LIKE
            <foreach collection="L_CATEGORY" item="item"
                     separator="OR F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_FIELD) LIKE ">
                <![CDATA[ CONCAT('%', #{item}, '%')  ]]>
            </foreach>
            )
            OR
            ( F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_EP) LIKE
            <foreach collection="L_CATEGORY" item="item" separator="OR F_ES_CATEGORY_NM(B.COMPANY_CD, B.JOB_EP) LIKE ">
                <![CDATA[ CONCAT('%', #{item}, '%')  ]]>
            </foreach>
            )
            )
        </if>
        ORDER BY RANDOM();
    </select>

    <update id="callClick" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.callClick*/
        UPDATE ES_PARTNER
        SET   CALL_CLICK = (SELECT COALESCE(CALL_CLICK, 0) + 1 FROM ES_PARTNER WHERE COMPANY_CD = #{COMPANY_CD} AND PARTNER_CD = #{PARTNER_CD})
        WHERE  COMPANY_CD    = #{COMPANY_CD}
          AND    PARTNER_CD = #{PARTNER_CD}
    </update>

    <select id="getCategory" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getCategory*/
        SELECT CATEGORY_NM AS "CATEGORY_NM"
        FROM ES_CATEGORY
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND PARENT_CD NOT IN ('MASTER', '01', '02', '03', '07', '08', '09')
        GROUP BY CATEGORY_NM
    </select>


    <select id="getNoticeAsking" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getNoticeAsking*/
        SELECT        COMPANY_CD AS "COMPANY_CD"
                    , BOARD_TYPE AS "BOARD_TYPE"
                    , SEQ AS "SEQ"
                    , TITLE AS "TITLE"
                    , CONTENTS AS "CONTENTS"
                    , MAIN_YN AS "MAIN_YN"
                    , INSERT_ID AS "INSERT_ID"
                    , INSERT_DTS AS "INSERT_DTS"
                    , UPDATE_ID AS "UPDATE_ID"
                    , UPDATE_DTS AS "UPDATE_DTS"
                    , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::date, 'YYYY-MM-DD') AS "DTS"
        FROM ES_BOARD
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND BOARD_TYPE NOT IN ('01')
        ORDER BY UPDATE_DTS, SEQ DESC
    </select>

    <select id="getNoticePaging" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getNoticePaging*/
        SELECT        COMPANY_CD AS "COMPANY_CD"
                    , BOARD_TYPE AS "BOARD_TYPE"
                    , SEQ AS "SEQ"
                    , TITLE AS "TITLE"
                    , CONTENTS AS "CONTENTS"
                    , MAIN_YN AS "MAIN_YN"
                    , INSERT_ID AS "INSERT_ID"
                    , INSERT_DTS AS "INSERT_DTS"
                    , UPDATE_ID AS "UPDATE_ID"
                    , UPDATE_DTS AS "UPDATE_DTS"
                    , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::date, 'YYYY-MM-DD') AS "DTS"
        FROM ES_BOARD
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND BOARD_TYPE = '01'
          AND COALESCE(MAIN_YN, '') != 'N'
        ORDER BY UPDATE_DTS, SEQ DESC
        LIMIT #{LIMIT} OFFSET (#{OFFSET} * #{LIMIT})
    </select>

    <select id="getPaging" resultType="int" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPaging*/
        SELECT COUNT(*) AS "PAGING"
        FROM ES_BOARD
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND BOARD_TYPE = '01'
          AND COALESCE(MAIN_YN, '') != 'N'
    </select>

    <select id="getMainNotice" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getMainNotice*/
        SELECT     COMPANY_CD AS "COMPANY_CD"
                 , BOARD_TYPE AS "BOARD_TYPE"
                 , SEQ AS "SEQ"
                 , TITLE AS "TITLE"
                 , CONTENTS AS "CONTENTS"
                 , MAIN_YN AS "MAIN_YN"
                 , INSERT_ID AS "INSERT_ID"
                 , INSERT_DTS AS "INSERT_DTS"
                 , UPDATE_ID AS "UPDATE_ID"
                 , UPDATE_DTS AS "UPDATE_DTS"
                 , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::date, 'YYYY-MM-DD') AS "DTS"
        FROM ES_BOARD
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND BOARD_TYPE = '01'
          AND COALESCE(MAIN_YN, '') = 'Y'
        ORDER BY UPDATE_DTS, SEQ DESC
        <if test='LIMIT != null and LIMIT != ""'>
        LIMIT #{LIMIT}
        </if>
    </select>

    <select id="getCommunityMainPage" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getCommunityMainPage*/
        SELECT     COMPANY_CD AS "COMPANY_CD"
                 , SEQ AS "SEQ"
                 , COMMUNITY_TP AS "COMMUNITY_TP"
                 , COMMUNITY_ST AS "COMMUNITY_ST"
                 , TITLE AS "TITLE"
                 , CONTENTS AS "CONTENTS"
                 , HIT AS "HIT"
                 , INSERT_ID AS "INSERT_ID"
                 , INSERT_DTS AS "INSERT_DTS"
                 , UPDATE_ID AS "UPDATE_ID"
                 , UPDATE_DTS AS "UPDATE_DTS"
                 , LIKE_NUM AS "LIKE_NUM"
                 , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::DATE, 'YYYY-MM-DD') AS "DTS"
        FROM ES_COMMUNITY
        WHERE COMPANY_CD = #{COMPANY_CD}
        AND COMMUNITY_TP = #{COMMUNITY_TP}
        ORDER BY UPDATE_DTS, SEQ DESC
        <if test='LIMIT != null and LIMIT != ""'>
            LIMIT #{LIMIT}
        </if>
    </select>

    <insert id="setWrite" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.setWrite*/
        INSERT INTO ES_COMMUNITY
        (
              COMPANY_CD
            , SEQ
            , NAME
            , COMMUNITY_TP
            , COMMUNITY_ST
            , TITLE
            , CONTENTS
            , HIT
            , INSERT_ID
            , INSERT_DTS
            , UPDATE_ID
            , UPDATE_DTS
            , COMMUNITY_GB
            , PW
        )
        VALUES
        (
              #{COMPANY_CD}
            , #{SEQ}
            , #{NAME}
            , #{COMMUNITY_TP}
            , #{COMMUNITY_ST}
            , #{TITLE}
            , #{CONTENTS}
            , 0
            , #{INSERT_ID}
            , #{INSERT_DTS}
            , #{UPDATE_ID}
            , #{UPDATE_DTS}
            , F_NVL_TEXT(#{COMMUNITY_GB}, '01')
            , #{PW}
       )
    </insert>

    <update id="setUpdate" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.setUpdate*/
        UPDATE  ES_COMMUNITY
        SET
            TITLE = #{TITLE},
            CONTENTS = #{CONTENTS},
            UPDATE_ID = #{UPDATE_ID},
            UPDATE_DTS = #{UPDATE_DTS},
            NAME = #{NAME},
            PW = #{PW}
        WHERE COMPANY_CD = #{COMPANY_CD}
        AND   SEQ = #{SEQ}
    </update>

    <update id="hitPlus" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.hitPlus*/
        UPDATE ES_COMMUNITY
        SET   HIT = (SELECT COALESCE(HIT, 0) + 1 FROM ES_COMMUNITY WHERE COMPANY_CD = #{COMPANY_CD} AND SEQ = #{SEQ})
        WHERE  COMPANY_CD    = #{COMPANY_CD}
          AND    SEQ = #{SEQ}
    </update>

    <update id="likePlus" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.likePlus*/
        UPDATE ES_COMMUNITY
        SET   LIKE_NUM = (SELECT COALESCE(LIKE_NUM, 0) + 1 FROM ES_COMMUNITY WHERE COMPANY_CD = #{COMPANY_CD} AND SEQ = #{SEQ})
        WHERE  COMPANY_CD    = #{COMPANY_CD}
          AND    SEQ = #{SEQ}
    </update>

    <update id="noPlus" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.noPlus*/
        UPDATE ES_COMMUNITY A
        SET   NO_NUM = (SELECT COALESCE(A.NO_NUM, 0) + 1 FROM ES_COMMUNITY WHERE COMPANY_CD = #{COMPANY_CD} AND SEQ = #{SEQ})
        WHERE  COMPANY_CD    = #{COMPANY_CD}
          AND    SEQ = #{SEQ}
    </update>

    <select id="getCommonCode" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getCommonCode*/
        SELECT   SYSDEF_CD AS "CODE"
               , SYSDEF_NM AS "NAME"
        FROM ES_CODEDTL
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND FIELD_CD = #{FIELD_CD}
          AND COALESCE(USE_YN, '') = 'Y'

    </select>

    <select id="getConsultingPaging" resultType="int" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getConsultingPaging*/
        SELECT COUNT(*) AS "PAGING"
        FROM ES_COMMUNITY
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND COMMUNITY_TP = #{COMMUNITY_TP}
        <if test = "!L_COMMUNITY_ST.get(0).equals('') and L_COMMUNITY_ST.size() > 0">
            AND COMMUNITY_ST IN (
            <foreach collection="L_COMMUNITY_ST" item="item" separator=",">
                #{item}
            </foreach>
            )
        </if>
    </select>

    <select id="getConsultingList" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getConsultingList*/
        SELECT
               COMPANY_CD AS "COMPANY_CD"
             , SEQ AS "SEQ"
             , NAME AS "NAME"
             , COMMUNITY_TP AS "COMMUNITY_TP"
             , COMMUNITY_ST AS "COMMUNITY_ST"
             , TITLE AS "TITLE"
             , CONTENTS AS "CONTENTS"
             , HIT AS "HIT"
             , INSERT_ID AS "INSERT_ID"
             , UPDATE_ID AS "UPDATE_ID"
             , UPDATE_DTS AS "UPDATE_DTS"
             , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::date, 'YYYY-MM-DD') AS "DTS"
        FROM ES_COMMUNITY
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND COMMUNITY_TP = #{COMMUNITY_TP}
        <if test = " S_COMMUNITY_ST != null and !S_COMMUNITY_ST.get(0).equals('') and S_COMMUNITY_ST.size() > 0 ">
            AND COMMUNITY_ST IN
            <foreach collection="S_COMMUNITY_ST" item="item"  open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        ORDER BY SEQ DESC
            LIMIT #{LIMIT} OFFSET (#{OFFSET} * #{LIMIT})
    </select>

    <insert id="reviewWrite" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.reviewWrite*/
        INSERT INTO ES_REVIEW_WRITE
        (
            COMPANY_CD
        , SEQ
        , NAME
        , IP
        , PARTNER_CD
        , RMK_DC
        , STAR_SCORE
        , INSERT_ID
        , INSERT_DTS
        , UPDATE_ID
        , UPDATE_DTS
        )
        VALUES
            (
                #{COMPANY_CD}
            , (SELECT COALESCE(MAX(SEQ), 0) + 1
               FROM ES_REVIEW_WRITE
               WHERE COMPANY_CD = #{COMPANY_CD}
                AND PARTNER_CD = #{PARTNER_CD}
                )
            , #{NAME}
            , #{IP}
            , #{PARTNER_CD}
            , #{RMK_DC}
            , #{STAR_SCORE}
            , #{INSERT_ID}
            , #{INSERT_DTS}
            , #{UPDATE_ID}
            , #{UPDATE_DTS}
            )
    </insert>

    <select id="getReviewList" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getReviewList*/
        SELECT     COMPANY_CD AS "COMPANY_CD"
                 , SEQ AS "SEQ"
                 , CASE WHEN LENGTH(NAME) > 0 THEN SUBSTRING(NAME FROM 1 FOR 1) || REPEAT('*', LENGTH(NAME) - 1) ELSE NAME END AS "NAME"
                 , IP AS "IP"
                 , RMK_DC AS "RMK_DC"
                 , STAR_SCORE AS "STAR_SCORE"
                 , INSERT_DTS AS "INSERT_DTS"
                 , REGEXP_REPLACE(INSERT_DTS, '(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})', '\1.\2.\3 \4:\5') AS "DTS"
        FROM ES_REVIEW_WRITE
        WHERE COMPANY_CD = #{COMPANY_CD}
        AND PARTNER_CD = #{PARTNER_CD}
        ORDER BY SEQ DESC
        LIMIT #{LIMIT} OFFSET (#{OFFSET} * #{LIMIT})
    </select>


    <select id="getNoticeDetail" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getNoticeDetail*/
        SELECT COMPANY_CD AS "COMPANY_CD"
             , BOARD_TYPE AS "BOARD_TYPE"
             , SEQ AS "SEQ"
             , TITLE AS "TITLE"
             , CONTENTS AS "CONTENTS"
             , MAIN_YN AS "MAIN_YN"
             , INSERT_ID AS "INSERT_ID"
             , INSERT_DTS AS "INSERT_DTS"
             , UPDATE_ID AS "UPDATE_ID"
             , UPDATE_DTS AS "UPDATE_DTS"
             , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::date, 'YYYY-MM-DD') AS "DTS"
        FROM ES_BOARD
        WHERE COMPANY_CD = #{COMPANY_CD}
          AND     SEQ = #{SEQ}
        ORDER BY UPDATE_DTS, SEQ DESC
    </select>

    <insert id="regWrite" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.regWrite*/
        INSERT INTO PL_DM_M
        (
              DM_CD
            , DM_TYPE
            , DM_KIND
            , COMP_NM
            , BORW_SITE
            , DEBTOR_TEL
            , DEBTOR_KAKAO
            , DEBTOR_TELE
            , DEBTOR_SNS
            , WITHDR_LOCA
            , COMPL_POLICE
            , DM_CONTENTS
            , PW
            , USE_YN
            , WRITE_DATE
            , WRITE_IP
            , INSERT_DATE
            , UPDATE_DATE
        )
        VALUES
        (
              #{DM_CD}
            , #{DM_TYPE}
            , #{DM_KIND}
            , #{COMP_NM}
            , #{BORW_SITE}
            , #{DEBTOR_TEL}
            , #{DEBTOR_KAKAO}
            , #{DEBTOR_TELE}
            , #{DEBTOR_SNS}
            , #{WITHDR_LOCA}
            , #{COMPL_POLICE}
            , #{DM_CONTENTS}
            , #{PW}
            , #{USE_YN}
            , #{WRITE_DATE}
            , #{WRITE_IP}
            , #{INSERT_DATE}
            , #{UPDATE_DATE}
        )
    </insert>

    <insert id="regWriteDeposit" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.regWriteDeposit*/
        INSERT INTO PL_DM_DEPOSIT
        (
              DM_CD
            , SEQ
            , BANK_CD
            , BANK_NM
            , NO_DEPOSIT
            , NM_DEPOSITOR
            , USE_YN
            , INSERT_DATE
            , UPDATE_DATE
        )
        VALUES
        (
              #{DM_CD}
            , #{SEQ}
            , #{BANK_CD}
            , #{BANK_NM}
            , #{NO_DEPOSIT}
            , #{NM_DEPOSITOR}
            , #{USE_YN}
            , #{INSERT_DATE}
            , #{UPDATE_DATE}
        )
    </insert>

    <select id="getPrivateLoanPlDmM" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanPlDmM*/
        SELECT    A.DM_CD                              AS "DM_CD"
                , F_NVL_TEXT(A.COMP_NM, '모름')         AS "COMP_NM"
                , F_NVL_TEXT(A.DEBTOR_TEL, '모름')      AS "DEBTOR_TEL"
                , F_NVL_TEXT(A.DEBTOR_KAKAO, '모름')    AS "DEBTOR_KAKAO"
                , F_NVL_TEXT(A.DEBTOR_TELE, '모름')     AS "DEBTOR_TELE"
                , F_NVL_TEXT(A.DEBTOR_SNS, '모름')      AS "DEBTOR_SNS"
                , CASE WHEN
                    CURRENT_DATE - TO_DATE(SUBSTRING(REPLACE(A.WRITE_DATE, '-', ''), 1, 8), 'YYYYMMDD') > F_NVL_NUM(B.SYSDEF_CD::INTEGER, 7) THEN 'N'
                    ELSE 'Y'
                END AS "NEW_VALUE"
        FROM    PL_DM_M A
        LEFT JOIN (SELECT SYSDEF_CD FROM ES_CODEDTL WHERE FIELD_CD = 'ES_Q0141' AND FLAG1_CD = 'Y' LIMIT 1) B
        ON 1 = 1
        WHERE   A.USE_YN = 'Y'
        <if test='DM_TYPE != null and DM_TYPE != ""'>
            AND A.DM_TYPE = #{DM_TYPE}
        </if>
        ORDER BY A.WRITE_DATE DESC
        LIMIT 6
    </select>

     <select id="getPrivateLoanPlDmMPaging" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanPlDmMPaging*/
        SELECT    A.DM_CD                              AS "DM_CD"
                , A.COMP_NM                            AS "COMP_NM"
                , F_NVL_TEXT(A.DEBTOR_TEL, '모름')      AS "DEBTOR_TEL"
                , F_NVL_TEXT(A.DEBTOR_KAKAO, '모름')    AS "DEBTOR_KAKAO"
                , F_NVL_TEXT(A.DEBTOR_TELE, '모름')     AS "DEBTOR_TELE"
                , F_NVL_TEXT(A.DEBTOR_SNS, '모름')      AS "DEBTOR_SNS"
                , CASE WHEN
                    CURRENT_DATE - TO_DATE(SUBSTRING(REPLACE(A.WRITE_DATE, '-', ''), 1, 8), 'YYYYMMDD') > F_NVL_NUM(B.SYSDEF_CD::INTEGER, 7) THEN 'N'
                    ELSE 'Y'
                END AS "NEW_VALUE"
        FROM    PL_DM_M A
        LEFT JOIN (SELECT SYSDEF_CD FROM ES_CODEDTL WHERE FIELD_CD = 'ES_Q0141' AND FLAG1_CD = 'Y' LIMIT 1) B
        ON 1 = 1
        WHERE   A.USE_YN = 'Y'
        <if test='DM_TYPE != null and DM_TYPE != ""'>
            AND A.DM_TYPE = #{DM_TYPE}
        </if>
        <if test='KEYWORD != null and KEYWORD != ""'>
         AND (
            A.COMP_NM ILIKE CONCAT('%', #{KEYWORD}, '%')
            OR F_NVL_TEXT(A.DEBTOR_TEL, '')    LIKE  '%' || #{KEYWORD} || '%'
            OR F_NVL_TEXT(A.DEBTOR_KAKAO, '')    LIKE  '%' || #{KEYWORD} || '%'
            OR F_NVL_TEXT(A.DEBTOR_TELE, '')    LIKE  '%' || #{KEYWORD} || '%'
            OR F_NVL_TEXT(A.DEBTOR_SNS, '')    LIKE  '%' || #{KEYWORD} || '%'
            )
        </if>
        ORDER BY A.WRITE_DATE DESC
        LIMIT 9 OFFSET #{MORE_BTN_COUNT}::INTEGER * 9
    </select>

    <select id="getPrivateLoanInfoPolice" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanInfoPolice*/
        SELECT CONCAT(STATION_NAME, '', DIVISION) AS "STATION_NAME"
             , ADDRESS AS "ADDRESS"
        FROM ES_INFO_POLICE
        WHERE 1 = 1
        <if test='SIDO != null and SIDO != ""'>
            AND SIDO = #{SIDO}
        </if>
        <if test='KEYWORD != null and KEYWORD != ""'>
            AND (
                STATION_NAME ILIKE CONCAT('%', #{KEYWORD}, '%')
                OR DIVISION ILIKE CONCAT('%', #{KEYWORD}, '%')
                OR ADDRESS ILIKE CONCAT('%', #{KEYWORD}, '%')
            )
        </if>
    </select>

     <select id="getPrivateLoanLiveComment" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanLiveComment*/
        SELECT    A.DM_CD AS "CODE"
                , SUBSTRING(A.CONTENTS, 1, 12) AS "TITLE"
                , SUBSTRING(A.INSERT_DATE, 1, 8) AS "DTS"
                , CASE WHEN COALESCE(B.DM_CD, '') != '' THEN '01' -- 01 대부업체
                WHEN COALESCE(C.SEQ, '') != '' THEN '02' -- 커뮤니티
                ELSE '' END AS "COM_TP"
        FROM PL_DM_COMM A
        LEFT JOIN PL_DM_M B
            ON A.DM_CD = B.DM_CD
        LEFT JOIN ES_COMMUNITY C
            ON A.DM_CD = C.SEQ
        ORDER BY A.WRITE_DATE DESC
        LIMIT 10
    </select>

    <select id="getPrivateLoanMainJob" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanMainJob*/
        SELECT	   JOB_CD AS "JOB_CD"
                 , JOB_NM AS "JOB_NM"
                 , TEL_NO AS "TEL_NO"
                 , JOB_ZONE AS "JOB_ZONE"
                 , F_ES_CATEGORY_NM(COMPANY_CD, JOB_ZONE) AS "JOB_ZONE_NM"
                 , JOB_TEXT AS "JOB_TEXT"
                 , IMG_URL AS "IMG_URL"
        FROM ES_JOB
        WHERE 1 = 1
          AND PREMIUM_YN = 'Y'
        ORDER BY JOB_CD
    </select>

    <select id="getPrivateLoanBoard" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
            /*apiMapper.getPrivateLoanBoard*/
            SELECT  SEQ AS "SEQ"
                 , SUBSTRING(TITLE, 1, 12) AS "TITLE"
                 , SUBSTRING(INSERT_DTS, 1, 8) AS "DTS"
            FROM ES_BOARD
            WHERE   COMPANY_CD = #{COMPANY_CD}
            AND     BOARD_TYPE = '04'
            ORDER BY F_NVL_TEXT(MAIN_YN, 'N') DESC, UPDATE_DTS DESC
            LIMIT 4
        </select>

    <select id="getPrivateLoanCommunity" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanCommunity*/
        SELECT  SEQ AS "SEQ"
             , SUBSTRING(TITLE, 1, 12) AS "TITLE"
             , SUBSTRING(INSERT_DTS, 1, 8) AS "DTS"
        FROM ES_COMMUNITY
        WHERE COMMUNITY_TP = '03'
        AND COMMUNITY_ST = '14'
        ORDER BY UPDATE_DTS DESC
        LIMIT 4
    </select>

    <select id="getPrivateLoanCommunityPaging" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanCommunityPaging*/
        SELECT    SEQ               AS "SEQ"
                , SUBSTRING(TITLE, 1, 50)             AS "TITLE"
                , F_ES_CODE_DETAIL(COMPANY_CD, 'ES_Q0138', COMMUNITY_TP) AS "COMMUNITY_TP"
                , CONCAT(SUBSTRING(NAME, 1, 1), 'OO')              AS "NAME"
                , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::DATE, 'YYYY-MM-DD') AS "DTS"
                , (SELECT count(*) FROM pl_dm_comm WHERE dm_cd = SEQ) AS "COMM_CUT"
                , CASE WHEN HIT BETWEEN 0 AND 999 THEN HIT::VARCHAR ELSE '999↑' END AS "HIT"
        FROM ES_COMMUNITY
        WHERE COMPANY_CD = #{COMPANY_CD}
        AND COMMUNITY_GB = '02'
        AND COMMUNITY_ST = #{COMMUNITY_ST}
        AND COMMUNITY_TP = #{COMMUNITY_TP}
        ORDER BY UPDATE_DTS DESC
        LIMIT 15 OFFSET #{MORE_BTN_COUNT}::INTEGER * 15
    </select>


    <select id="getPrivateNotice" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateNotice*/
        SELECT COMPANY_CD AS "COMPANY_CD"
             , BOARD_TYPE AS "BOARD_TYPE"
             , SEQ AS "SEQ"
             , TITLE AS "TITLE"
             , CONTENTS AS "CONTENTS"
             , F_ES_CODE_DETAIL(COMPANY_CD, 'ES_Q0143', BOARD_ST) AS "BOARD_ST_NM"
             , BOARD_ST AS "BOARD_ST"
             , MAIN_YN AS "MAIN_YN"
             , INSERT_ID AS "INSERT_ID"
             , INSERT_DTS AS "INSERT_DTS"
             , UPDATE_ID AS "UPDATE_ID"
             , UPDATE_DTS AS "UPDATE_DTS"
             , TO_CHAR(SUBSTRING(UPDATE_DTS, 1, 8)::date, 'YYYY-MM-DD') AS "DTS"
        FROM ES_BOARD
        WHERE COMPANY_CD = #{COMPANY_CD}
        AND BOARD_TYPE = #{BOARD_TYPE}
        ORDER BY CASE WHEN MAIN_YN = 'Y' THEN 1 ELSE 2 END, UPDATE_DTS DESC, SEQ DESC
        LIMIT #{LIMIT}::INTEGER OFFSET #{OFFSET}::INTEGER * #{LIMIT}::INTEGER
    </select>

    <select id="getPrivateLoanPlDmMDetail" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanPlDmMDetail*/
        SELECT    A.DM_CD            AS "DM_CD"
                , F_NVL_TEXT(F_ES_CODE_DETAIL('1000', 'ES_Q0140', A.DM_KIND), '모름')          AS "DM_KIND"
                , F_NVL_TEXT(A.COMP_NM, '모름')          AS "COMP_NM"
                , F_NVL_TEXT(A.BORW_SITE, '모름')        AS "BORW_SITE"
                , F_NVL_TEXT(A.DEBTOR_TEL, '모름')       AS "DEBTOR_TEL"
                , F_NVL_TEXT(A.DEBTOR_KAKAO, '모름')     AS "DEBTOR_KAKAO"
                , F_NVL_TEXT(A.DEBTOR_TELE, '모름')      AS "DEBTOR_TELE"
                , F_NVL_TEXT(A.DEBTOR_SNS, '모름')       AS "DEBTOR_SNS"
                , F_NVL_TEXT(A.WITHDR_LOCA, '모름')      AS "WITHDR_LOCA"
                , F_NVL_TEXT(A.COMPL_POLICE, '모름')     AS "COMPL_POLICE"
                , F_NVL_TEXT(A.DM_CONTENTS, '모름')      AS "DM_CONTENTS"
        FROM PL_DM_M A
        WHERE A.DM_CD = #{DM_CD}
    </select>

    <select id="getPrivateLoanPlDmDeposit" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanPlDmDeposit*/
        SELECT    F_NVL_TEXT(BANK_NM, '은행모름')      AS "BANK_NM"
                , F_NVL_TEXT(NO_DEPOSIT, '계좌모름')   AS "NO_DEPOSIT"
                , F_NVL_TEXT(NM_DEPOSITOR, '예금주모름') AS "NM_DEPOSITOR"
        FROM PL_DM_DEPOSIT
        WHERE DM_CD = #{DM_CD}
    </select>


    <select id="getPrivateLoanPlDmCommList" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanPlDmCommList*/
        SELECT     DM_CD          AS "DM_CD"
                 , COMM_CD        AS "COMM_CD"
                 , PARENT_CD      AS "PARENT_CD"
                 , NICK_NM        AS "NICK_NM"
                 , CONTENTS       AS "CONTENTS"
                 , USE_YN         AS "USE_YN"
                 , REPORT_YN      AS "REPORT_YN"
                 , WRITE_DATE     AS "WRITE_DATE"
            FROM PL_DM_COMM
        WHERE DM_CD = #{DM_CD}
    </select>

    <select id="getPrivateLoanPlDmMRelation" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanPlDmMRelation*/
        SELECT    A.DM_CD                              AS "DM_CD"
                , A.COMP_NM                            AS "COMP_NM"
                , F_NVL_TEXT(A.DEBTOR_TEL, '모름')      AS "DEBTOR_TEL"
                , F_NVL_TEXT(A.DEBTOR_KAKAO, '모름')    AS "DEBTOR_KAKAO"
                , F_NVL_TEXT(A.DEBTOR_TELE, '모름')     AS "DEBTOR_TELE"
                , F_NVL_TEXT(A.DEBTOR_SNS, '모름')      AS "DEBTOR_SNS"
                , CASE WHEN CURRENT_DATE - TO_DATE(SUBSTRING(REPLACE(A.WRITE_DATE, '-', ''), 1, 8), 'YYYYMMDD') > F_NVL_NUM(B.SYSDEF_CD::INTEGER, 7) THEN 'N' ELSE 'Y' END AS "NEW_VALUE"
                , C.NO_DEPOSIT AS "NO_DEPOSIT"
        FROM    PL_DM_M A
        LEFT JOIN (SELECT SYSDEF_CD FROM ES_CODEDTL WHERE FIELD_CD = 'ES_Q0141' AND FLAG1_CD = 'Y' LIMIT 1) B
            ON 1 = 1
        LEFT JOIN PL_DM_DEPOSIT C
            ON A.DM_CD = C.DM_CD
        WHERE   A.USE_YN = 'Y'
        AND A.DM_CD != #{DM_CD}
        AND (
            A.COMP_NM LIKE SUBSTRING(#{COMP_NM}, 1, 2) || '%'
            OR  A.DEBTOR_TEL LIKE '%' || SUBSTRING(#{DEBTOR_TEL} FROM LENGTH(#{DEBTOR_TEL}) - 4)
            OR C.NO_DEPOSIT LIKE '%' || SUBSTRING(#{NO_DEPOSIT} FROM LENGTH(#{NO_DEPOSIT}) - 4)
        )
        LIMIT 3
    </select>

    <select id="getPrivateLoanPlDmMRandom" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanPlDmMRandom*/
        SELECT    A.DM_CD                              AS "DM_CD"
                , A.COMP_NM                            AS "COMP_NM"
                , F_NVL_TEXT(A.DEBTOR_TEL, '모름')      AS "DEBTOR_TEL"
                , F_NVL_TEXT(A.DEBTOR_KAKAO, '모름')    AS "DEBTOR_KAKAO"
                , F_NVL_TEXT(A.DEBTOR_TELE, '모름')     AS "DEBTOR_TELE"
                , F_NVL_TEXT(A.DEBTOR_SNS, '모름')      AS "DEBTOR_SNS"
                , CASE WHEN CURRENT_DATE - TO_DATE(SUBSTRING(REPLACE(A.WRITE_DATE, '-', ''), 1, 8), 'YYYYMMDD') > F_NVL_NUM(B.SYSDEF_CD::INTEGER, 7) THEN 'N' ELSE 'Y' END AS "NEW_VALUE"
                , C.NO_DEPOSIT AS "NO_DEPOSIT"
        FROM    PL_DM_M A
        LEFT JOIN (SELECT SYSDEF_CD FROM ES_CODEDTL WHERE FIELD_CD = 'ES_Q0141' AND FLAG1_CD = 'Y' LIMIT 1) B
            ON 1 = 1
        LEFT JOIN PL_DM_DEPOSIT C
            ON A.DM_CD = C.DM_CD
        WHERE   A.USE_YN = 'Y'
        ORDER BY RANDOM()
        LIMIT 3
    </select>

    <select id="getPrivateLoanCommunityDetail" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateLoanCommunityDetail*/
        SELECT    SEQ       AS "SEQ"
                , TITLE     AS "TITLE"
                , CONTENTS  AS "CONTENTS"
        FROM ES_COMMUNITY
        WHERE SEQ = #{SEQ}
    </select>

    <insert id="insertEsCommunityHit" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.insertEsCommunityHit*/
        INSERT INTO ES_COMMUNITY_HIT
        (COMPANY_CD, SEQ, IP)
        VALUES
        (#{COMPANY_CD}, #{SEQ}, #{IP})
        ON CONFLICT (COMPANY_CD, SEQ, IP) DO NOTHING
    </insert>

    <select id="getPrivateJobList" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.getPrivateJobList*/
        SELECT    CONCAT(#{IMG_URL}, REPLACE(IMG_URL, 'C:', '')) AS "IMG_URL"
                , JOB_CD AS "JOB_CD"
                , JOB_NM AS "JOB_NM"
                , TEL_NO AS "TEL_NO"
                , JOB_ZONE AS "JOB_ZONE"
                , REPLACE(F_ES_CATEGORY_NM(COMPANY_CD, JOB_ZONE), '|', '/') AS "JOB_ZONE_NM"
                , JOB_TEXT AS "JOB_TEXT"
                , PREMIUM_YN AS "PREMIUM_YN"
                , USE_YN AS "USE_YN"
                , INSERT_ID AS "INSERT_ID"
                , INSERT_DTS AS "INSERT_DTS"
                , UPDATE_ID AS "UPDATE_ID"
                , UPDATE_DTS AS "UPDATE_DTS"
        FROM ES_JOB
        WHERE COMPANY_CD = #{COMPANY_CD}
        AND COALESCE(USE_YN, 'N') = 'Y'
        <if test = "L_JOB_ZONE != null and L_JOB_ZONE.size() > 0 and !L_JOB_ZONE.get(0).equals('')">
            AND ( F_ES_CATEGORY_NM(COMPANY_CD, JOB_ZONE) LIKE
            <foreach collection="L_JOB_ZONE" item="item" separator="OR F_ES_CATEGORY_NM(COMPANY_CD, JOB_ZONE) LIKE ">
                <![CDATA[ CONCAT('%', #{item}, '%')  ]]>
            </foreach>
            )
        </if>
        ORDER BY RANDOM()
        LIMIT #{LIMIT}::INTEGER OFFSET #{OFFSET}::INTEGER * #{LIMIT}::INTEGER
    </select>

    <select id="checkCommunityPwd" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.checkCommunityPwd*/
        SELECT SEQ AS "SEQ"
        FROM ES_COMMUNITY
        WHERE   COMPANY_CD =  #{COMPANY_CD}
        AND     SEQ = #{SEQ}
        AND     PW =  #{PW}
    </select>

    <select id="selectCommunityDetail" resultType="hashmap" parameterType="hashmap" statementType="CALLABLE">
        /*apiMapper.selectCommunityDetail*/
        SELECT  TITLE AS "TITLE",
                CONTENTS AS "CONTENTS",
                NAME AS "NAME"
        FROM ES_COMMUNITY
        WHERE   COMPANY_CD =  #{COMPANY_CD}
          AND     SEQ = #{SEQ}
    </select>
</mapper>

